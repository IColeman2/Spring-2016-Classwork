package InvoiceSystem;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

/**
 * This is a collection of utility methods that define a general API for
 * interacting with the database supporting this application.
 *
 */
public class InvoiceData {
	private static Connection conn;
	private final String url = "jdbc:mysql://cse.unl.edu/icoleman";
	private final String username = "icoleman";
	private final String password = "4Kt:7H";
	private static Logger log = LogManager.getLogger("invoiceSystem");
	private static MysqlDataSource dataSource;
	
	public InvoiceData(){
		dataSource = new MysqlDataSource();
		dataSource.setUser(username);
		dataSource.setURL(url);
		dataSource.setPassword(password);
		try {
			conn = dataSource.getConnection();
		} catch (SQLException e) {
			log.fatal("Incorrect Password", e);
		}
	}
	
	
	
	private static PreparedStatement getPreparedStatement(String query){
		PreparedStatement ps = null;
		try {
			ps = conn.prepareStatement(query);
			
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
		return ps;
	}
	
	private static ResultSet getResultSet(String query){
		PreparedStatement ps = getPreparedStatement(query);
		ResultSet rs = null;
		try {
			rs = ps.executeQuery();
			
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
		return rs;
	}
	
	/**
	 * Method that removes every person record from the database
	 */
	public static void removeAllPersons() {
		String query = "SELECT * FROM Persons";		
		ResultSet rs = getResultSet(query);
		try {
			while(rs.next()){
			}
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
	}

	/**
	 * Removes the person record from the database corresponding to the
	 * provided <code>personCode</code>
	 * @param personCode
	 */
	public static void removePerson(String personCode) {
		String query = "SELECT * FROM Persons";		
		ResultSet rs = getResultSet(query);
		try {
			while(rs.next()){
			}
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
	}
	
	/**
	 * Method to add a person record to the database with the provided data. 
	 * @param personCode
	 * @param firstName
	 * @param lastName
	 * @param street
	 * @param city
	 * @param state
	 * @param zip
	 * @param country
	 */
	public static void addPerson(String personCode, String firstName, String lastName, 
			String street, String city, String state, String zip, String country) {
		String query = "INSERT INTO Persons(personCode, firstName, lastName, addressId) "
				+ "VALUES(" + personCode + ", " + firstName + ", " + lastName + ", " 
				+ getAddressId(street, city, state, zip, country) + ")";
		PreparedStatement ps = getPreparedStatement(query);
		try {
			ps.executeUpdate();
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
	}
	
	/**
	 * Adds an email record corresponding person record corresponding to the
	 * provided <code>personCode</code>
	 * @param personCode
	 * @param email
	 */
	public static void addEmail(String personCode, String email) {
		String query = "INSERT INTO Emails(emailAddress, personId) "
				+ "VALUES (" + email + ", " + getPersonId(personCode) + ")";
		PreparedStatement ps = getPreparedStatement(query);
		try {
			ps.executeUpdate();
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
	}
	
	/**
	 * Method that removes every customer record from the database
	 */
	public static void removeAllCustomers() {
	}

	public static void addCustomer(String customerCode, String type, String primaryContactPersonCode, String name, 
			String street, String city, String state, String zip, String country) {
		String query = "INSERT INTO Customers(customerCode, customerName, customerType, addressId, personId) "
				+ "VALUES(" + customerCode + ", " + name + ", " +  type + ", " 
				+ getAddressId(street, city, state, zip, country) + ", " 
				+ getPersonId(primaryContactPersonCode) + ")";
		PreparedStatement ps = getPreparedStatement(query);
		try {
			ps.executeUpdate();
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
	}

	/**
	 * Removes all product records from the database
	 */
	public static void removeAllProducts() {}

	/**
	 * Removes a particular product record from the database corresponding to the
	 * provided <code>productCode</code>
	 * @param assetCode
	 */
	public static void removeProduct(String productCode) {}

	/**
	 * Adds an equipment record to the database with the
	 * provided data.  
	 */
	public static void addEquipment(String productCode, String name, Double pricePerUnit) {
		String query = "INSERT INTO Products (productCode, productName, productType, unitCost) "
				+ "VALUES (" + productCode + ", " + name + ", equimpent, " + pricePerUnit + ")";
		PreparedStatement ps = getPreparedStatement(query);
		try {
			ps.executeUpdate();
		} catch (SQLException e) {
			log.fatal("Invalid Query", e);
		}
	}
	
	/**
	 * Adds an license record to the database with the
	 * provided data.  
	 */
	public static void addLicense(String productCode, String name, double serviceFee, double annualFee) {
		String query = "INSERT INTO Products "
				+ "(productCode, productName, productType, annualServiceFee, flatServiceFee) "
				+ "VALUES (" + productCode + ", " + name + ", license, " + annualFee + ", " + serviceFee + ")";
		PreparedStatement ps = getPreparedStatement(query);
		try {
			ps.executeUpdate();
		} catch (SQLException e) {
			log.fatal("Invalid Query", e);
		}
	}

	/**
	 * Adds an consultation record to the database with the
	 * provided data.  
	 */
	public static void addConsultation(String productCode, String name, String consultantPersonCode, Double hourlyFee) {
		String query = "INSERT INTO Products (productCode, productName, productType, perHourCost, personId) "
				+ "VALUES (" + productCode + ", " + name + ", equimpent, " + hourlyFee + "," 
				+ getPersonId(consultantPersonCode) + ")";
		PreparedStatement ps = getPreparedStatement(query);
		try {
			ps.executeUpdate();
		} catch (SQLException e) {
			log.fatal("Invalid Query", e);
		}
	}
	
	/**
	 * Removes all invoice records from the database
	 */
	public static void removeAllInvoices() {}
	
	/**
	 * Removes the invoice record from the database corresponding to the
	 * provided <code>invoiceCode</code>
	 * @param invoiceCode
	 */
	public static void removeInvoice(String invoiceCode) {}
	
	/**
	 * Adds an invoice record to the database with the given data.  
	 */
	public static void addInvoice(String invoiceCode, String customerCode, String salesPersonCode) {}
	
	/**
	 * Adds a particular equipment (corresponding to <code>productCode</code> to an 
	 * invoice corresponding to the provided <code>invoiceCode</code> with the given
	 * number of units
	 */
	public static void addEquipmentToInvoice(String invoiceCode, String productCode, int numUnits) {}
	
	/**
	 * Adds a particular equipment (corresponding to <code>productCode</code> to an 
	 * invoice corresponding to the provided <code>invoiceCode</code> with the given
	 * begin/end dates
	 */
	public static void addLicenseToInvoice(String invoiceCode, String productCode, String startDate, String endDate) {}

	/**
	 * Adds a particular equipment (corresponding to <code>productCode</code> to an 
	 * invoice corresponding to the provided <code>invoiceCode</code> with the given
	 * number of billable hours.
	 */
	public static void addConsultationToInvoice(String invoiceCode, String productCode, double numHours) {}
	
	private static int getPersonId(String code){
		String query = "SELECT personId FROM Persons WHERE personCode = " + code;
		ResultSet rs = getResultSet(query);
		int id = 0;
		try {
			while(rs.next()){
				id = rs.getInt("personId");
			}
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
		return id;
	}
	
	private static int getCountryId(String code){
		String query = "SELECT countryId FROM Countries WHERE countryName = " + code;
		ResultSet rs = getResultSet(query);
		int id = 0;
		try {
			while(rs.next()){
				id = rs.getInt("countryId");
			}
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
		return id;
	}
	
	private static int getStateId(String code){
		String query = "SELECT stateId FROM States WHERE stateName = " + code;
		ResultSet rs = getResultSet(query);
		int id = 0;
		try {
			while(rs.next()){
				id = rs.getInt("stateId");
			}
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
		return id;
	}
	
	private static int getAddressId(String street, String city, String state, String zip, String country){
		String query = "SELECT addressId FROM Addresses WHERE street = " + street + 
				", city = " + city + ", state = " + getStateId(state) + 
				", zip = " + zip + ", country = " + country + ")";
		ResultSet rs = getResultSet(query);
		int id = 0;
		try {
			while(rs.next()){
				id = rs.getInt("addressId");
			}
		} catch (SQLException e) {
			log.fatal("Incorrect Query", e);
		}
		return id;
	}
}